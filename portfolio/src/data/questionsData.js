export const levels = [
    {
        task: "Initialize a new git repository",
        command: "git init",
        success: "✅ Repository initialized successfully!",
        hint: "Use 'git init' to create a new Git repository in the current directory",
    },
    {
        task: 'Configure your Git username by writing the word "Name"',
        command: 'git config --global user.name "Name"',
        success: "✅ Username configured successfully!",
        hint: 'Use git config --global user.name "Name" exactly as shown',
    },
    {
        task: 'Configure your Git email by writing the email "my@email.com"',
        command: 'git config --global user.email "my@email.com"',
        success: "✅ Email configured successfully!",
        hint: 'Use git config --global user.email "my@email.com" exactly as shown',
    },
    {
        task: "Check the status of your repository",
        command: "git status",
        success: "✅ Repository status checked successfully!",
        hint: "Use 'git status' to see which files are tracked, modified, or untracked",
    },
    {
        task: "Add all files to the staging area",
        command: "git add .",
        success: "✅ Files staged successfully!",
        hint: "Use 'git add .' to stage all files in the current directory",
    },
    {
        task: "List all branches in your repository",
        command: "git branch",
        success: "✅ Branches listed successfully!",
        hint: "Use 'git branch' to see all local branches",
    },
    {
        task: 'Create a new feature branch',
        command: "git branch feature",
        success: "✅ Feature branch created successfully!",
        hint: "Use 'git branch' followed by the word 'feature'",
    },
    {
        task: "Add a remote repository by writing the word 'link'",
        command: "git remote add origin link",
        success: "✅ Remote repository added successfully!",
        hint: "Use git remote add origin, replacing the actual URL with the word 'link'",
    },
    {
        task: 'Push to the remote repository (use the words "origin" and "main")',
        command: "git push -u origin main",
        success: "✅ Code pushed to remote successfully!",
        hint: "Use git push -u origin main",
    },
    {
        task: 'Merge the feature branch by writing the word "feature"',
        command: "git merge feature",
        success: "✅ Feature branch merged successfully!",
        hint: "Use git merge followed by the word 'feature'",
    },
    {
        task: "View commit history",
        command: "git log",
        success: "✅ Commit history displayed successfully!",
        hint: "Use 'git log' to see the commit history in detail",
    },
    {
        task: "View changes between working directory and staging area",
        command: "git diff",
        success: "✅ Changes displayed successfully!",
        hint: "Use 'git diff' to see unstaged changes",
    },
    {
        task: "Temporarily store modified tracked files",
        command: "git stash",
        success: "✅ Changes stashed successfully!",
        hint: "Use 'git stash' to save changes without committing",
    },
    {
        task: "Apply the most recent stashed changes",
        command: "git stash pop",
        success: "✅ Stashed changes applied successfully!",
        hint: "Use 'git stash pop' to apply and remove the most recent stash",
    },
    {
        task: 'Create a new version tag by writing "v1.0"',
        command: "git tag v1.0",
        success: "✅ Version tagged successfully!",
        hint: "Use 'git tag' followed by the version number, writing 'v1.0'",
    },
    {
        task: "Undo the last commit while keeping changes",
        command: "git reset HEAD~1",
        success: "✅ Last commit undone successfully!",
        hint: "Use 'git reset HEAD~1' to undo the last commit",
    },
    {
        task: "Create a new commit that undoes previous commit",
        command: "git revert HEAD",
        success: "✅ Commit reverted successfully!",
        hint: "Use 'git revert HEAD' to undo changes with a new commit",
    },
    {
        task: 'Download objects from remote repository (use the words "origin" and "main")',
        command: "git fetch origin",
        success: "✅ Remote changes fetched successfully!",
        hint: "Use 'git fetch' followed by the word 'origin'",
    },
    {
        task: 'Show detailed information about remote repository (use the word "origin")',
        command: "git remote show origin",
        success: "✅ Remote details displayed successfully!",
        hint: "Use 'git remote show' followed by the word 'origin'",
    },
    {
        task: "Apply a specific commit by writing 'abc123' as a placeholder for the commit hash",
        command: "git cherry-pick abc123",
        success: "✅ Commit cherry-picked successfully!",
        hint: "Use git cherry-pick with 'abc123', which represents the commit hash you want to apply",
    },
    {
        task: "Preview which files will be deleted",
        command: "git clean -n",
        success: "✅ Clean preview completed successfully!",
        hint: "Use 'git clean -n' for a dry run of clean operation",
    },
    {
        task: "Clean up unnecessary files and optimize repository",
        command: "git gc",
        success: "✅ Repository cleaned successfully!",
        hint: "Use 'git gc' to clean up and optimize",
    },
    {
        task: 'Create and switch to new branch by writing the word "feature"',
        command: "git checkout -b feature",
        success: "✅ Branch created and switched successfully!",
        hint: "Use 'git checkout -b' followed by the word 'feature'",
    },
    {
        task: 'Rename a branch by writing "old-name" and "new-name"',
        command: "git branch -m old-name new-name",
        success: "✅ Branch renamed successfully!",
        hint: "Use 'git branch -m' with 'old-name' and 'new-name'",
    },
    {
        task: "Add a Git submodule by writing the word 'link'",
        command: "git submodule add link",
        success: "✅ Submodule added successfully!",
        hint: "Use 'git submodule add', replacing the actual URL with the word 'link'",
    },
    {
        task: "Update all submodules",
        command: "git submodule update",
        success: "✅ Submodules updated successfully!",
        hint: "Use 'git submodule update' to update all submodules",
    },
    {
        task: 'Merge and squash feature branch commits by writing the word "feature"',
        command: "git merge --squash feature",
        success: "✅ Branch squashed successfully!",
        hint: "Use 'git merge --squash' followed by the word 'feature'",
    },
    {
        task: 'Rebase current branch onto main by writing the word "main"',
        command: "git rebase main",
        success: "✅ Branch rebased successfully!",
        hint: "Use 'git rebase' followed by the word 'main'",
    },
    {
        task: "View commit history with graph",
        command: "git log --graph --oneline",
        success: "✅ Graph displayed successfully!",
        hint: "Use 'git log --graph --oneline' for a visual commit history",
    },
    {
        task: 'Show who modified each line of a file by writing "file.txt"',
        command: "git blame file.txt",
        success: "✅ Line changes displayed successfully!",
        hint: "Use 'git blame' followed by the filename 'file.txt'",
    },
    {
        task: 'Set default text editor by writing "code --wait"',
        command: "git config --global core.editor \"code --wait\"",
        success: "✅ Editor configured successfully!",
        hint: 'Use git config --global core.editor "code --wait" exactly as shown',
    },
    {
        task: 'Create a shortcut "co" for the checkout command',
        command: "git config --global alias.co checkout",
        success: "✅ Alias created successfully!",
        hint: "Use git config --global alias.co checkout exactly as shown",
    },
    {
        task: "Check repository integrity",
        command: "git fsck",
        success: "✅ Repository integrity verified!",
        hint: "Use git fsck to check for corruption",
    },
    {
        task: "Remove unreferenced objects",
        command: "git prune",
        success: "✅ Unreferenced objects removed!",
        hint: "Clean up dangling objects with git prune",
    },
    {
        task: "Start binary search for bugs",
        command: "git bisect start",
        success: "✅ Binary search initiated!",
        hint: "Use git bisect start to find problematic commits",
    },
    {
        task: "Verify packed objects",
        command: "git verify-pack -v .git/objects/pack/*.idx",
        success: "✅ Pack verification complete!",
        hint: "Check the integrity of packed repository objects",
    },
    {
        task: "Set up a pre-commit hook",
        command: "git hook add pre-commit",
        success: "✅ Pre-commit hook added!",
        hint: "Use git hook add pre-commit",
    },
    {
        task: "Start interactive rebase for the last three commits",
        command: "git rebase -i HEAD~3",
        success: "✅ Interactive rebase started!",
        hint: "Use git rebase -i HEAD~3 to modify the last three commits",
    },
    {
        task: 'Remove sensitive file by writing "password.txt"',
        command: "git filter-branch --tree-filter \"rm -f password.txt\"",
        success: "✅ File removed from history!",
        hint: 'Use git filter-branch --tree-filter "rm -f password.txt"',
    },
    {
        task: 'Show commits unique to feature branch by writing "master" and "feature"',
        command: "git cherry -v master feature",
        success: "✅ Unique commits displayed!",
        hint: "Use git cherry -v with branch names 'master' and 'feature'",
    },
    {
        task: 'Create an annotated tag by writing "v1.0" and the message "Release version 1.0"',
        command: 'git tag -a v1.0 -m "Release version 1.0"',
        success: "✅ Annotated tag created!",
        hint: 'Use git tag with "v1.0" as the version and "Release version 1.0" as the annotation message',
    },
    {
        task: "Show branching history decoration",
        command: "git log --decorate --oneline --graph",
        success: "✅ Decorated history displayed!",
        hint: "View a decorated graph of commit history",
    },
    {
        task: 'Search commit messages by writing "bug fix"',
        command: "git log --grep=\"bug fix\"",
        success: "✅ Commit search complete!",
        hint: 'Use git log --grep with the search term "bug fix"',
    },
    {
        task: 'Search for changes to a specific code by writing "function name" and "file.js"',
        command: "git log -S\"function name\" file.js",
        success: "✅ Code change history found!",
        hint: 'Use git log -S with "function name" and filename "file.js"',
    },
    {
        task: 'Show file modification history by writing "file.txt"',
        command: "git log --follow -p file.txt",
        success: "✅ File history displayed!",
        hint: "Use git log --follow -p with filename 'file.txt'",
    },
    {
        task: "Show repository statistics",
        command: "git shortlog -sn",
        success: "✅ Contributor statistics shown!",
        hint: "Use git shortlog -sn to see commit counts per author",
    },
    {
        task: "Update remote URL by writing the word 'new-link'",
        command: "git remote set-url origin new-link",
        success: "✅ Remote URL updated!",
        hint: "Use git remote set-url origin, replacing with the word 'new-link'",
    },
    {
        task: 'Remove references to deleted remote branches (use the word "origin")',
        command: "git remote prune origin",
        success: "✅ Remote branches cleaned!",
        hint: "Use git remote prune followed by the word 'origin'",
    },
    {
        task: "Show repository disk usage",
        command: "git count-objects -vH",
        success: "✅ Repository size displayed!",
        hint: "Use git count-objects -vH to view detailed size information",
    },
    {
        task: "Push final changes",
        command: "git push",
        success: "🎉 Congratulations! You've completed all Git commands!",
        hint: "Push your changes to the remote repository with git push",
    }
]